/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Tutorial Management API
 * This API exposes endpoints to manage tutorials.
 *
 * OpenAPI spec version: 1.0
 * Contact: myemail@gmail.com
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as url from "url";
import * as isomorphicFetch from "isomorphic-fetch";
import { Configuration } from "./configuration";
import {ParsedUrlQuery} from "querystring";

const BASE_PATH = "";

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

interface localVarUrlObjType {
    search?: string | null;
    query?: ParsedUrlQuery;
}

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration | undefined;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = isomorphicFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name!: "RequiredError";
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface ApartmentInfoDTO
 */
export interface ApartmentInfoDTO {
    /**
     * 
     * @type {number}
     * @memberof ApartmentInfoDTO
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof ApartmentInfoDTO
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof ApartmentInfoDTO
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof ApartmentInfoDTO
     */
    location: string;
    /**
     * 
     * @type {string}
     * @memberof ApartmentInfoDTO
     */
    amenities: string;
    /**
     * 
     * @type {string}
     * @memberof ApartmentInfoDTO
     */
    pictures: string;
    /**
     * 
     * @type {number}
     * @memberof ApartmentInfoDTO
     */
    price: number;
}
/**
 * 
 * @export
 * @interface AvailablePeriodInfoDTO
 */
export interface AvailablePeriodInfoDTO {
    /**
     * 
     * @type {number}
     * @memberof AvailablePeriodInfoDTO
     */
    apartId: number;
    /**
     * 
     * @type {string}
     * @memberof AvailablePeriodInfoDTO
     */
    date: string;
}
/**
 * 
 * @export
 * @interface BookApartmentDTO
 */
export interface BookApartmentDTO {
    /**
     * 
     * @type {string}
     * @memberof BookApartmentDTO
     */
    checkIn: string;
    /**
     * 
     * @type {string}
     * @memberof BookApartmentDTO
     */
    checkOut: string;
    /**
     * 
     * @type {number}
     * @memberof BookApartmentDTO
     */
    guests: number;
}
/**
 * 
 * @export
 * @interface BookingInfoDTO
 */
export interface BookingInfoDTO {
    /**
     * 
     * @type {number}
     * @memberof BookingInfoDTO
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof BookingInfoDTO
     */
    clientName: string;
    /**
     * 
     * @type {string}
     * @memberof BookingInfoDTO
     */
    checkIn: string;
    /**
     * 
     * @type {string}
     * @memberof BookingInfoDTO
     */
    checkOut: string;
    /**
     * 
     * @type {number}
     * @memberof BookingInfoDTO
     */
    guests: number;
    /**
     * 
     * @type {string}
     * @memberof BookingInfoDTO
     */
    state: string;
    /**
     * 
     * @type {ApartmentInfoDTO}
     * @memberof BookingInfoDTO
     */
    apartmentInfo: ApartmentInfoDTO;
}
/**
 * 
 * @export
 * @interface ClientInfoDTO
 */
export interface ClientInfoDTO {
    /**
     * 
     * @type {string}
     * @memberof ClientInfoDTO
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof ClientInfoDTO
     */
    email: string;
    /**
     * 
     * @type {number}
     * @memberof ClientInfoDTO
     */
    phoneNumber: number;
}
/**
 * 
 * @export
 * @interface CreateReviewDTO
 */
export interface CreateReviewDTO {
    /**
     * 
     * @type {string}
     * @memberof CreateReviewDTO
     */
    description: string;
    /**
     * 
     * @type {number}
     * @memberof CreateReviewDTO
     */
    rating: number;
}
/**
 * 
 * @export
 * @interface PeriodCreateDTO
 */
export interface PeriodCreateDTO {
    /**
     * 
     * @type {string}
     * @memberof PeriodCreateDTO
     */
    startDate: string;
    /**
     * 
     * @type {string}
     * @memberof PeriodCreateDTO
     */
    endDate: string;
}
/**
 * 
 * @export
 * @interface PeriodInfoDTO
 */
export interface PeriodInfoDTO {
    /**
     * 
     * @type {number}
     * @memberof PeriodInfoDTO
     */
    apartId: number;
    /**
     * 
     * @type {string}
     * @memberof PeriodInfoDTO
     */
    date: string;
    /**
     * 
     * @type {boolean}
     * @memberof PeriodInfoDTO
     */
    available: boolean;
}
/**
 * 
 * @export
 * @interface ReviewInfoDTO
 */
export interface ReviewInfoDTO {
    /**
     * 
     * @type {string}
     * @memberof ReviewInfoDTO
     */
    clientName: string;
    /**
     * 
     * @type {string}
     * @memberof ReviewInfoDTO
     */
    description?: string;
    /**
     * 
     * @type {number}
     * @memberof ReviewInfoDTO
     */
    rating?: number;
}
/**
 * ApartmentControllerApi - fetch parameter creator
 * @export
 */
export const ApartmentControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {BookApartmentDTO} body 
         * @param {number} username 
         * @param {number} apartmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bookApartment(body: BookApartmentDTO, username: number, apartmentId: number, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling bookApartment.');
            }
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling bookApartment.');
            }
            // verify required parameter 'apartmentId' is not null or undefined
            if (apartmentId === null || apartmentId === undefined) {
                throw new RequiredError('apartmentId','Required parameter apartmentId was null or undefined when calling bookApartment.');
            }
            const localVarPath = `/apartments/{apartmentId}/booking/{username}`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)))
                .replace(`{${"apartmentId"}}`, encodeURIComponent(String(apartmentId)));
            const localVarUrlObj: localVarUrlObjType = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            if (configuration && configuration.accessToken) {
                localVarHeaderParameter['Authorization'] = `Bearer ${configuration.accessToken}`;
            }
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"BookApartmentDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {PeriodCreateDTO} body 
         * @param {number} apartmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApartmentPeriod(body: PeriodCreateDTO, apartmentId: number, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createApartmentPeriod.');
            }
            // verify required parameter 'apartmentId' is not null or undefined
            if (apartmentId === null || apartmentId === undefined) {
                throw new RequiredError('apartmentId','Required parameter apartmentId was null or undefined when calling createApartmentPeriod.');
            }
            const localVarPath = `/apartments/{apartmentId}/period`
                .replace(`{${"apartmentId"}}`, encodeURIComponent(String(apartmentId)));
            const localVarUrlObj: localVarUrlObjType = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            if (configuration && configuration.accessToken) {
                localVarHeaderParameter['Authorization'] = `Bearer ${configuration.accessToken}`;
            }
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"PeriodCreateDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} apartmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApartmentAvailablePeriods(apartmentId: number, options: any = {}): FetchArgs {
            // verify required parameter 'apartmentId' is not null or undefined
            if (apartmentId === null || apartmentId === undefined) {
                throw new RequiredError('apartmentId','Required parameter apartmentId was null or undefined when calling getApartmentAvailablePeriods.');
            }
            const localVarPath = `/apartments/{apartmentId}/availablePeriods`
                .replace(`{${"apartmentId"}}`, encodeURIComponent(String(apartmentId)));
            const localVarUrlObj: localVarUrlObjType = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            if (configuration && configuration.accessToken) {
                localVarHeaderParameter['Authorization'] = `Bearer ${configuration.accessToken}`;
            }
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} apartmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApartmentById(apartmentId: number, options: any = {}): FetchArgs {
            // verify required parameter 'apartmentId' is not null or undefined
            if (apartmentId === null || apartmentId === undefined) {
                throw new RequiredError('apartmentId','Required parameter apartmentId was null or undefined when calling getApartmentById.');
            }
            const localVarPath = `/apartments/{apartmentId}`
                .replace(`{${"apartmentId"}}`, encodeURIComponent(String(apartmentId)));
            const localVarUrlObj: localVarUrlObjType = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            if (configuration && configuration.accessToken) {
                localVarHeaderParameter['Authorization'] = `Bearer ${configuration.accessToken}`;
            }
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} apartmentId 
         * @param {number} periodId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApartmentPeriod(apartmentId: number, periodId: number, options: any = {}): FetchArgs {
            // verify required parameter 'apartmentId' is not null or undefined
            if (apartmentId === null || apartmentId === undefined) {
                throw new RequiredError('apartmentId','Required parameter apartmentId was null or undefined when calling getApartmentPeriod.');
            }
            // verify required parameter 'periodId' is not null or undefined
            if (periodId === null || periodId === undefined) {
                throw new RequiredError('periodId','Required parameter periodId was null or undefined when calling getApartmentPeriod.');
            }
            const localVarPath = `/apartments/{apartmentId}/periods/{periodId}`
                .replace(`{${"apartmentId"}}`, encodeURIComponent(String(apartmentId)))
                .replace(`{${"periodId"}}`, encodeURIComponent(String(periodId)));
            const localVarUrlObj: localVarUrlObjType = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            if (configuration && configuration.accessToken) {
                localVarHeaderParameter['Authorization'] = `Bearer ${configuration.accessToken}`;
            }
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} apartmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApartmentPeriods(apartmentId: number, options: any = {}): FetchArgs {
            // verify required parameter 'apartmentId' is not null or undefined
            if (apartmentId === null || apartmentId === undefined) {
                throw new RequiredError('apartmentId','Required parameter apartmentId was null or undefined when calling getApartmentPeriods.');
            }
            const localVarPath = `/apartments/{apartmentId}/periods`
                .replace(`{${"apartmentId"}}`, encodeURIComponent(String(apartmentId)));
            const localVarUrlObj: localVarUrlObjType = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            if (configuration && configuration.accessToken) {
                localVarHeaderParameter['Authorization'] = `Bearer ${configuration.accessToken}`;
            }
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} apartmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApartmentReviews(apartmentId: number, options: any = {}): FetchArgs {
            // verify required parameter 'apartmentId' is not null or undefined
            if (apartmentId === null || apartmentId === undefined) {
                throw new RequiredError('apartmentId','Required parameter apartmentId was null or undefined when calling getApartmentReviews.');
            }
            const localVarPath = `/apartments/{apartmentId}/reviews`
                .replace(`{${"apartmentId"}}`, encodeURIComponent(String(apartmentId)));
            const localVarUrlObj: localVarUrlObjType = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            if (configuration && configuration.accessToken) {
                localVarHeaderParameter['Authorization'] = `Bearer ${configuration.accessToken}`;
            }
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApartments(options: any = {}): FetchArgs {
            const localVarPath = `/apartments/`;
            const localVarUrlObj: localVarUrlObjType = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            if (configuration && configuration.accessToken) {
                localVarHeaderParameter['Authorization'] = `Bearer ${configuration.accessToken}`;
            }
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvailableApartmentsForPeriod(startDate: string, endDate: string, options: any = {}): FetchArgs {
            // verify required parameter 'startDate' is not null or undefined
            if (startDate === null || startDate === undefined) {
                throw new RequiredError('startDate','Required parameter startDate was null or undefined when calling getAvailableApartmentsForPeriod.');
            }
            // verify required parameter 'endDate' is not null or undefined
            if (endDate === null || endDate === undefined) {
                throw new RequiredError('endDate','Required parameter endDate was null or undefined when calling getAvailableApartmentsForPeriod.');
            }
            const localVarPath = `/apartments/periods`;
            const localVarUrlObj: localVarUrlObjType = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            if (configuration && configuration.accessToken) {
                localVarHeaderParameter['Authorization'] = `Bearer ${configuration.accessToken}`;
            }
            const localVarQueryParameter = {} as any;

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = (startDate as any).toISOString();
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = (endDate as any).toISOString();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApartmentControllerApi - functional programming interface
 * @export
 */
export const ApartmentControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {BookApartmentDTO} body 
         * @param {number} username 
         * @param {number} apartmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bookApartment(body: BookApartmentDTO, username: number, apartmentId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<BookingInfoDTO> {
            const localVarFetchArgs = ApartmentControllerApiFetchParamCreator(configuration).bookApartment(body, username, apartmentId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {PeriodCreateDTO} body 
         * @param {number} apartmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApartmentPeriod(body: PeriodCreateDTO, apartmentId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<PeriodInfoDTO>> {
            const localVarFetchArgs = ApartmentControllerApiFetchParamCreator(configuration).createApartmentPeriod(body, apartmentId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} apartmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApartmentAvailablePeriods(apartmentId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<AvailablePeriodInfoDTO>> {
            const localVarFetchArgs = ApartmentControllerApiFetchParamCreator(configuration).getApartmentAvailablePeriods(apartmentId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} apartmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApartmentById(apartmentId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ApartmentInfoDTO> {
            const localVarFetchArgs = ApartmentControllerApiFetchParamCreator(configuration).getApartmentById(apartmentId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} apartmentId 
         * @param {number} periodId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApartmentPeriod(apartmentId: number, periodId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ApartmentControllerApiFetchParamCreator(configuration).getApartmentPeriod(apartmentId, periodId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} apartmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApartmentPeriods(apartmentId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<PeriodInfoDTO>> {
            const localVarFetchArgs = ApartmentControllerApiFetchParamCreator(configuration).getApartmentPeriods(apartmentId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} apartmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApartmentReviews(apartmentId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<ReviewInfoDTO>> {
            const localVarFetchArgs = ApartmentControllerApiFetchParamCreator(configuration).getApartmentReviews(apartmentId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApartments(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<ApartmentInfoDTO>> {
            const localVarFetchArgs = ApartmentControllerApiFetchParamCreator(configuration).getApartments(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvailableApartmentsForPeriod(startDate: string, endDate: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<ApartmentInfoDTO>> {
            const localVarFetchArgs = ApartmentControllerApiFetchParamCreator(configuration).getAvailableApartmentsForPeriod(startDate, endDate, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ApartmentControllerApi - factory interface
 * @export
 */
export const ApartmentControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {BookApartmentDTO} body 
         * @param {number} username 
         * @param {number} apartmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        bookApartment(body: BookApartmentDTO, username: number, apartmentId: number, options?: any) {
            return ApartmentControllerApiFp(configuration).bookApartment(body, username, apartmentId, options)(fetch, basePath);
        },
        /**
         * 
         * @param {PeriodCreateDTO} body 
         * @param {number} apartmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApartmentPeriod(body: PeriodCreateDTO, apartmentId: number, options?: any) {
            return ApartmentControllerApiFp(configuration).createApartmentPeriod(body, apartmentId, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} apartmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApartmentAvailablePeriods(apartmentId: number, options?: any) {
            return ApartmentControllerApiFp(configuration).getApartmentAvailablePeriods(apartmentId, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} apartmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApartmentById(apartmentId: number, options?: any) {
            return ApartmentControllerApiFp(configuration).getApartmentById(apartmentId, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} apartmentId 
         * @param {number} periodId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApartmentPeriod(apartmentId: number, periodId: number, options?: any) {
            return ApartmentControllerApiFp(configuration).getApartmentPeriod(apartmentId, periodId, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} apartmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApartmentPeriods(apartmentId: number, options?: any) {
            return ApartmentControllerApiFp(configuration).getApartmentPeriods(apartmentId, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} apartmentId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApartmentReviews(apartmentId: number, options?: any) {
            return ApartmentControllerApiFp(configuration).getApartmentReviews(apartmentId, options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getApartments(options?: any) {
            return ApartmentControllerApiFp(configuration).getApartments(options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} startDate 
         * @param {string} endDate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAvailableApartmentsForPeriod(startDate: string, endDate: string, options?: any) {
            return ApartmentControllerApiFp(configuration).getAvailableApartmentsForPeriod(startDate, endDate, options)(fetch, basePath);
        },
    };
};

/**
 * ApartmentControllerApi - object-oriented interface
 * @export
 * @class ApartmentControllerApi
 * @extends {BaseAPI}
 */
export class ApartmentControllerApi extends BaseAPI {
    /**
     * 
     * @param {BookApartmentDTO} body 
     * @param {number} username 
     * @param {number} apartmentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApartmentControllerApi
     */
    public bookApartment(body: BookApartmentDTO, username: number, apartmentId: number, options?: any) {
        return ApartmentControllerApiFp(this.configuration).bookApartment(body, username, apartmentId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {PeriodCreateDTO} body 
     * @param {number} apartmentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApartmentControllerApi
     */
    public createApartmentPeriod(body: PeriodCreateDTO, apartmentId: number, options?: any) {
        return ApartmentControllerApiFp(this.configuration).createApartmentPeriod(body, apartmentId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} apartmentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApartmentControllerApi
     */
    public getApartmentAvailablePeriods(apartmentId: number, options?: any) {
        return ApartmentControllerApiFp(this.configuration).getApartmentAvailablePeriods(apartmentId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} apartmentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApartmentControllerApi
     */
    public getApartmentById(apartmentId: number, options?: any) {
        return ApartmentControllerApiFp(this.configuration).getApartmentById(apartmentId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} apartmentId 
     * @param {number} periodId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApartmentControllerApi
     */
    public getApartmentPeriod(apartmentId: number, periodId: number, options?: any) {
        return ApartmentControllerApiFp(this.configuration).getApartmentPeriod(apartmentId, periodId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} apartmentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApartmentControllerApi
     */
    public getApartmentPeriods(apartmentId: number, options?: any) {
        return ApartmentControllerApiFp(this.configuration).getApartmentPeriods(apartmentId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} apartmentId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApartmentControllerApi
     */
    public getApartmentReviews(apartmentId: number, options?: any) {
        return ApartmentControllerApiFp(this.configuration).getApartmentReviews(apartmentId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApartmentControllerApi
     */
    public getApartments(options?: any) {
        return ApartmentControllerApiFp(this.configuration).getApartments(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {string} startDate 
     * @param {string} endDate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApartmentControllerApi
     */
    public getAvailableApartmentsForPeriod(startDate: string, endDate: string, options?: any) {
        return ApartmentControllerApiFp(this.configuration).getAvailableApartmentsForPeriod(startDate, endDate, options)(this.fetch, this.basePath);
    }

}
/**
 * BookingControllerApi - fetch parameter creator
 * @export
 */
export const BookingControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} bookingID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBooking(bookingID: number, options: any = {}): FetchArgs {
            // verify required parameter 'bookingID' is not null or undefined
            if (bookingID === null || bookingID === undefined) {
                throw new RequiredError('bookingID','Required parameter bookingID was null or undefined when calling getBooking.');
            }
            const localVarPath = `/bookings/{bookingID}`
                .replace(`{${"bookingID"}}`, encodeURIComponent(String(bookingID)));
            const localVarUrlObj: localVarUrlObjType = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            if (configuration && configuration.accessToken) {
                localVarHeaderParameter['Authorization'] = `Bearer ${configuration.accessToken}`;
            }
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} bookingID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBookingReview(bookingID: number, options: any = {}): FetchArgs {
            // verify required parameter 'bookingID' is not null or undefined
            if (bookingID === null || bookingID === undefined) {
                throw new RequiredError('bookingID','Required parameter bookingID was null or undefined when calling getBookingReview.');
            }
            const localVarPath = `/bookings/{bookingID}/review`
                .replace(`{${"bookingID"}}`, encodeURIComponent(String(bookingID)));
            const localVarUrlObj: localVarUrlObjType = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            if (configuration && configuration.accessToken) {
                localVarHeaderParameter['Authorization'] = `Bearer ${configuration.accessToken}`;
            }
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BookingControllerApi - functional programming interface
 * @export
 */
export const BookingControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} bookingID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBooking(bookingID: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<BookingInfoDTO> {
            const localVarFetchArgs = BookingControllerApiFetchParamCreator(configuration).getBooking(bookingID, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} bookingID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBookingReview(bookingID: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ReviewInfoDTO> {
            const localVarFetchArgs = BookingControllerApiFetchParamCreator(configuration).getBookingReview(bookingID, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * BookingControllerApi - factory interface
 * @export
 */
export const BookingControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {number} bookingID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBooking(bookingID: number, options?: any) {
            return BookingControllerApiFp(configuration).getBooking(bookingID, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} bookingID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBookingReview(bookingID: number, options?: any) {
            return BookingControllerApiFp(configuration).getBookingReview(bookingID, options)(fetch, basePath);
        },
    };
};

/**
 * BookingControllerApi - object-oriented interface
 * @export
 * @class BookingControllerApi
 * @extends {BaseAPI}
 */
export class BookingControllerApi extends BaseAPI {
    /**
     * 
     * @param {number} bookingID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingControllerApi
     */
    public getBooking(bookingID: number, options?: any) {
        return BookingControllerApiFp(this.configuration).getBooking(bookingID, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} bookingID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BookingControllerApi
     */
    public getBookingReview(bookingID: number, options?: any) {
        return BookingControllerApiFp(this.configuration).getBookingReview(bookingID, options)(this.fetch, this.basePath);
    }

}
/**
 * ClientControllerApi - fetch parameter creator
 * @export
 */
export const ClientControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} username 
         * @param {number} bookingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelBooking(username: number, bookingId: number, options: any = {}): FetchArgs {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling cancelBooking.');
            }
            // verify required parameter 'bookingId' is not null or undefined
            if (bookingId === null || bookingId === undefined) {
                throw new RequiredError('bookingId','Required parameter bookingId was null or undefined when calling cancelBooking.');
            }
            const localVarPath = `/clients/{username}/{bookingId}/cancelled`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)))
                .replace(`{${"bookingId"}}`, encodeURIComponent(String(bookingId)));
            const localVarUrlObj: localVarUrlObjType = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            if (configuration && configuration.accessToken) {
                localVarHeaderParameter['Authorization'] = `Bearer ${configuration.accessToken}`;
            }
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} username 
         * @param {number} bookingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkIn(username: number, bookingId: number, options: any = {}): FetchArgs {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling checkIn.');
            }
            // verify required parameter 'bookingId' is not null or undefined
            if (bookingId === null || bookingId === undefined) {
                throw new RequiredError('bookingId','Required parameter bookingId was null or undefined when calling checkIn.');
            }
            const localVarPath = `/clients/{username}/{bookingId}/checkedIn`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)))
                .replace(`{${"bookingId"}}`, encodeURIComponent(String(bookingId)));
            const localVarUrlObj: localVarUrlObjType = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            if (configuration && configuration.accessToken) {
                localVarHeaderParameter['Authorization'] = `Bearer ${configuration.accessToken}`;
            }
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} username 
         * @param {number} bookingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkOut(username: number, bookingId: number, options: any = {}): FetchArgs {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling checkOut.');
            }
            // verify required parameter 'bookingId' is not null or undefined
            if (bookingId === null || bookingId === undefined) {
                throw new RequiredError('bookingId','Required parameter bookingId was null or undefined when calling checkOut.');
            }
            const localVarPath = `/clients/{username}/{bookingId}/checkedOut`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)))
                .replace(`{${"bookingId"}}`, encodeURIComponent(String(bookingId)));
            const localVarUrlObj: localVarUrlObjType = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            if (configuration && configuration.accessToken) {
                localVarHeaderParameter['Authorization'] = `Bearer ${configuration.accessToken}`;
            }
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ClientInfoDTO} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createClient(body: ClientInfoDTO, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createClient.');
            }
            const localVarPath = `/clients/`;
            const localVarUrlObj: localVarUrlObjType = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            if (configuration && configuration.accessToken) {
                localVarHeaderParameter['Authorization'] = `Bearer ${configuration.accessToken}`;
            }
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"ClientInfoDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClient(username: number, options: any = {}): FetchArgs {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling getClient.');
            }
            const localVarPath = `/clients/{username}`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            const localVarUrlObj: localVarUrlObjType = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            if (configuration && configuration.accessToken) {
                localVarHeaderParameter['Authorization'] = `Bearer ${configuration.accessToken}`;
            }
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientBookings(username: number, options: any = {}): FetchArgs {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling getClientBookings.');
            }
            const localVarPath = `/clients/{username}/bookings`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            const localVarUrlObj: localVarUrlObjType = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            if (configuration && configuration.accessToken) {
                localVarHeaderParameter['Authorization'] = `Bearer ${configuration.accessToken}`;
            }
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientReviews(username: number, options: any = {}): FetchArgs {
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling getClientReviews.');
            }
            const localVarPath = `/clients/{username}/reviews`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)));
            const localVarUrlObj: localVarUrlObjType = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            if (configuration && configuration.accessToken) {
                localVarHeaderParameter['Authorization'] = `Bearer ${configuration.accessToken}`;
            }
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ClientControllerApi - functional programming interface
 * @export
 */
export const ClientControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} username 
         * @param {number} bookingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelBooking(username: number, bookingId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ClientControllerApiFetchParamCreator(configuration).cancelBooking(username, bookingId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} username 
         * @param {number} bookingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkIn(username: number, bookingId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ClientControllerApiFetchParamCreator(configuration).checkIn(username, bookingId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} username 
         * @param {number} bookingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkOut(username: number, bookingId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ClientControllerApiFetchParamCreator(configuration).checkOut(username, bookingId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {ClientInfoDTO} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createClient(body: ClientInfoDTO, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = ClientControllerApiFetchParamCreator(configuration).createClient(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClient(username: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ClientInfoDTO> {
            const localVarFetchArgs = ClientControllerApiFetchParamCreator(configuration).getClient(username, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientBookings(username: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<BookingInfoDTO>> {
            const localVarFetchArgs = ClientControllerApiFetchParamCreator(configuration).getClientBookings(username, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientReviews(username: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<ReviewInfoDTO>> {
            const localVarFetchArgs = ClientControllerApiFetchParamCreator(configuration).getClientReviews(username, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ClientControllerApi - factory interface
 * @export
 */
export const ClientControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {number} username 
         * @param {number} bookingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelBooking(username: number, bookingId: number, options?: any) {
            return ClientControllerApiFp(configuration).cancelBooking(username, bookingId, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} username 
         * @param {number} bookingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkIn(username: number, bookingId: number, options?: any) {
            return ClientControllerApiFp(configuration).checkIn(username, bookingId, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} username 
         * @param {number} bookingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkOut(username: number, bookingId: number, options?: any) {
            return ClientControllerApiFp(configuration).checkOut(username, bookingId, options)(fetch, basePath);
        },
        /**
         * 
         * @param {ClientInfoDTO} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createClient(body: ClientInfoDTO, options?: any) {
            return ClientControllerApiFp(configuration).createClient(body, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClient(username: number, options?: any) {
            return ClientControllerApiFp(configuration).getClient(username, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientBookings(username: number, options?: any) {
            return ClientControllerApiFp(configuration).getClientBookings(username, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} username 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getClientReviews(username: number, options?: any) {
            return ClientControllerApiFp(configuration).getClientReviews(username, options)(fetch, basePath);
        },
    };
};

/**
 * ClientControllerApi - object-oriented interface
 * @export
 * @class ClientControllerApi
 * @extends {BaseAPI}
 */
export class ClientControllerApi extends BaseAPI {
    /**
     * 
     * @param {number} username 
     * @param {number} bookingId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientControllerApi
     */
    public cancelBooking(username: number, bookingId: number, options?: any) {
        return ClientControllerApiFp(this.configuration).cancelBooking(username, bookingId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} username 
     * @param {number} bookingId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientControllerApi
     */
    public checkIn(username: number, bookingId: number, options?: any) {
        return ClientControllerApiFp(this.configuration).checkIn(username, bookingId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} username 
     * @param {number} bookingId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientControllerApi
     */
    public checkOut(username: number, bookingId: number, options?: any) {
        return ClientControllerApiFp(this.configuration).checkOut(username, bookingId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {ClientInfoDTO} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientControllerApi
     */
    public createClient(body: ClientInfoDTO, options?: any) {
        return ClientControllerApiFp(this.configuration).createClient(body, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} username 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientControllerApi
     */
    public getClient(username: number, options?: any) {
        return ClientControllerApiFp(this.configuration).getClient(username, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} username 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientControllerApi
     */
    public getClientBookings(username: number, options?: any) {
        return ClientControllerApiFp(this.configuration).getClientBookings(username, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} username 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ClientControllerApi
     */
    public getClientReviews(username: number, options?: any) {
        return ClientControllerApiFp(this.configuration).getClientReviews(username, options)(this.fetch, this.basePath);
    }

}
/**
 * OwnerControllerApi - fetch parameter creator
 * @export
 */
export const OwnerControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} body 
         * @param {number} ownerId 
         * @param {number} bookingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeBookingStatus(body: string, ownerId: number, bookingId: number, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling changeBookingStatus.');
            }
            // verify required parameter 'ownerId' is not null or undefined
            if (ownerId === null || ownerId === undefined) {
                throw new RequiredError('ownerId','Required parameter ownerId was null or undefined when calling changeBookingStatus.');
            }
            // verify required parameter 'bookingId' is not null or undefined
            if (bookingId === null || bookingId === undefined) {
                throw new RequiredError('bookingId','Required parameter bookingId was null or undefined when calling changeBookingStatus.');
            }
            const localVarPath = `/owners/{ownerId}/bookings/{bookingId}`
                .replace(`{${"ownerId"}}`, encodeURIComponent(String(ownerId)))
                .replace(`{${"bookingId"}}`, encodeURIComponent(String(bookingId)));
            const localVarUrlObj: localVarUrlObjType = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            if (configuration && configuration.accessToken) {
                localVarHeaderParameter['Authorization'] = `Bearer ${configuration.accessToken}`;
            }
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"string" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOwner(options: any = {}): FetchArgs {
            const localVarPath = `/owners/`;
            const localVarUrlObj: localVarUrlObjType = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            if (configuration && configuration.accessToken) {
                localVarHeaderParameter['Authorization'] = `Bearer ${configuration.accessToken}`;
            }
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} ownerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOwner(ownerId: number, options: any = {}): FetchArgs {
            // verify required parameter 'ownerId' is not null or undefined
            if (ownerId === null || ownerId === undefined) {
                throw new RequiredError('ownerId','Required parameter ownerId was null or undefined when calling getOwner.');
            }
            const localVarPath = `/owners/{ownerId}`
                .replace(`{${"ownerId"}}`, encodeURIComponent(String(ownerId)));
            const localVarUrlObj: localVarUrlObjType = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            if (configuration && configuration.accessToken) {
                localVarHeaderParameter['Authorization'] = `Bearer ${configuration.accessToken}`;
            }
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} ownerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOwnerApartments(ownerId: number, options: any = {}): FetchArgs {
            // verify required parameter 'ownerId' is not null or undefined
            if (ownerId === null || ownerId === undefined) {
                throw new RequiredError('ownerId','Required parameter ownerId was null or undefined when calling getOwnerApartments.');
            }
            const localVarPath = `/owners/{ownerId}/apartments`
                .replace(`{${"ownerId"}}`, encodeURIComponent(String(ownerId)));
            const localVarUrlObj: localVarUrlObjType = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            if (configuration && configuration.accessToken) {
                localVarHeaderParameter['Authorization'] = `Bearer ${configuration.accessToken}`;
            }
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} ownerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOwnerBookings(ownerId: number, options: any = {}): FetchArgs {
            // verify required parameter 'ownerId' is not null or undefined
            if (ownerId === null || ownerId === undefined) {
                throw new RequiredError('ownerId','Required parameter ownerId was null or undefined when calling getOwnerBookings.');
            }
            const localVarPath = `/owners/{ownerId}/apartments-bookings`
                .replace(`{${"ownerId"}}`, encodeURIComponent(String(ownerId)));
            const localVarUrlObj: localVarUrlObjType = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            if (configuration && configuration.accessToken) {
                localVarHeaderParameter['Authorization'] = `Bearer ${configuration.accessToken}`;
            }
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OwnerControllerApi - functional programming interface
 * @export
 */
export const OwnerControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} body 
         * @param {number} ownerId 
         * @param {number} bookingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeBookingStatus(body: string, ownerId: number, bookingId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = OwnerControllerApiFetchParamCreator(configuration).changeBookingStatus(body, ownerId, bookingId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOwner(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = OwnerControllerApiFetchParamCreator(configuration).createOwner(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} ownerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOwner(ownerId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = OwnerControllerApiFetchParamCreator(configuration).getOwner(ownerId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} ownerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOwnerApartments(ownerId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<ApartmentInfoDTO>> {
            const localVarFetchArgs = OwnerControllerApiFetchParamCreator(configuration).getOwnerApartments(ownerId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} ownerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOwnerBookings(ownerId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<BookingInfoDTO>> {
            const localVarFetchArgs = OwnerControllerApiFetchParamCreator(configuration).getOwnerBookings(ownerId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * OwnerControllerApi - factory interface
 * @export
 */
export const OwnerControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {string} body 
         * @param {number} ownerId 
         * @param {number} bookingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeBookingStatus(body: string, ownerId: number, bookingId: number, options?: any) {
            return OwnerControllerApiFp(configuration).changeBookingStatus(body, ownerId, bookingId, options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOwner(options?: any) {
            return OwnerControllerApiFp(configuration).createOwner(options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} ownerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOwner(ownerId: number, options?: any) {
            return OwnerControllerApiFp(configuration).getOwner(ownerId, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} ownerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOwnerApartments(ownerId: number, options?: any) {
            return OwnerControllerApiFp(configuration).getOwnerApartments(ownerId, options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} ownerId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOwnerBookings(ownerId: number, options?: any) {
            return OwnerControllerApiFp(configuration).getOwnerBookings(ownerId, options)(fetch, basePath);
        },
    };
};

/**
 * OwnerControllerApi - object-oriented interface
 * @export
 * @class OwnerControllerApi
 * @extends {BaseAPI}
 */
export class OwnerControllerApi extends BaseAPI {
    /**
     * 
     * @param {string} body 
     * @param {number} ownerId 
     * @param {number} bookingId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OwnerControllerApi
     */
    public changeBookingStatus(body: string, ownerId: number, bookingId: number, options?: any) {
        return OwnerControllerApiFp(this.configuration).changeBookingStatus(body, ownerId, bookingId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OwnerControllerApi
     */
    public createOwner(options?: any) {
        return OwnerControllerApiFp(this.configuration).createOwner(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} ownerId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OwnerControllerApi
     */
    public getOwner(ownerId: number, options?: any) {
        return OwnerControllerApiFp(this.configuration).getOwner(ownerId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} ownerId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OwnerControllerApi
     */
    public getOwnerApartments(ownerId: number, options?: any) {
        return OwnerControllerApiFp(this.configuration).getOwnerApartments(ownerId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} ownerId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OwnerControllerApi
     */
    public getOwnerBookings(ownerId: number, options?: any) {
        return OwnerControllerApiFp(this.configuration).getOwnerBookings(ownerId, options)(this.fetch, this.basePath);
    }

}
/**
 * PeriodControllerApi - fetch parameter creator
 * @export
 */
export const PeriodControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} periodID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPeriod(periodID: number, options: any = {}): FetchArgs {
            // verify required parameter 'periodID' is not null or undefined
            if (periodID === null || periodID === undefined) {
                throw new RequiredError('periodID','Required parameter periodID was null or undefined when calling getPeriod.');
            }
            const localVarPath = `/periods/{periodID}`
                .replace(`{${"periodID"}}`, encodeURIComponent(String(periodID)));
            const localVarUrlObj: localVarUrlObjType = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            if (configuration && configuration.accessToken) {
                localVarHeaderParameter['Authorization'] = `Bearer ${configuration.accessToken}`;
            }
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PeriodControllerApi - functional programming interface
 * @export
 */
export const PeriodControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} periodID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPeriod(periodID: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = PeriodControllerApiFetchParamCreator(configuration).getPeriod(periodID, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * PeriodControllerApi - factory interface
 * @export
 */
export const PeriodControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {number} periodID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPeriod(periodID: number, options?: any) {
            return PeriodControllerApiFp(configuration).getPeriod(periodID, options)(fetch, basePath);
        },
    };
};

/**
 * PeriodControllerApi - object-oriented interface
 * @export
 * @class PeriodControllerApi
 * @extends {BaseAPI}
 */
export class PeriodControllerApi extends BaseAPI {
    /**
     * 
     * @param {number} periodID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PeriodControllerApi
     */
    public getPeriod(periodID: number, options?: any) {
        return PeriodControllerApiFp(this.configuration).getPeriod(periodID, options)(this.fetch, this.basePath);
    }

}
/**
 * ReviewControllerApi - fetch parameter creator
 * @export
 */
export const ReviewControllerApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateReviewDTO} body 
         * @param {number} username 
         * @param {number} bookingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReview(body: CreateReviewDTO, username: number, bookingId: number, options: any = {}): FetchArgs {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling createReview.');
            }
            // verify required parameter 'username' is not null or undefined
            if (username === null || username === undefined) {
                throw new RequiredError('username','Required parameter username was null or undefined when calling createReview.');
            }
            // verify required parameter 'bookingId' is not null or undefined
            if (bookingId === null || bookingId === undefined) {
                throw new RequiredError('bookingId','Required parameter bookingId was null or undefined when calling createReview.');
            }
            const localVarPath = `/reviews/{username}/review/{bookingId}`
                .replace(`{${"username"}}`, encodeURIComponent(String(username)))
                .replace(`{${"bookingId"}}`, encodeURIComponent(String(bookingId)));
            const localVarUrlObj: localVarUrlObjType = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            if (configuration && configuration.accessToken) {
                localVarHeaderParameter['Authorization'] = `Bearer ${configuration.accessToken}`;
            }
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"CreateReviewDTO" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllReviews(options: any = {}): FetchArgs {
            const localVarPath = `/reviews/`;
            const localVarUrlObj: localVarUrlObjType = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            if (configuration && configuration.accessToken) {
                localVarHeaderParameter['Authorization'] = `Bearer ${configuration.accessToken}`;
            }
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} reviewId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReview(reviewId: number, options: any = {}): FetchArgs {
            // verify required parameter 'reviewId' is not null or undefined
            if (reviewId === null || reviewId === undefined) {
                throw new RequiredError('reviewId','Required parameter reviewId was null or undefined when calling getReview.');
            }
            const localVarPath = `/reviews/{reviewId}`
                .replace(`{${"reviewId"}}`, encodeURIComponent(String(reviewId)));
            const localVarUrlObj: localVarUrlObjType = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            if (configuration && configuration.accessToken) {
                localVarHeaderParameter['Authorization'] = `Bearer ${configuration.accessToken}`;
            }
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReviewControllerApi - functional programming interface
 * @export
 */
export const ReviewControllerApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateReviewDTO} body 
         * @param {number} username 
         * @param {number} bookingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReview(body: CreateReviewDTO, username: number, bookingId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ReviewInfoDTO> {
            const localVarFetchArgs = ReviewControllerApiFetchParamCreator(configuration).createReview(body, username, bookingId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllReviews(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<ReviewInfoDTO>> {
            const localVarFetchArgs = ReviewControllerApiFetchParamCreator(configuration).getAllReviews(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {number} reviewId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReview(reviewId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<ReviewInfoDTO> {
            const localVarFetchArgs = ReviewControllerApiFetchParamCreator(configuration).getReview(reviewId, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ReviewControllerApi - factory interface
 * @export
 */
export const ReviewControllerApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {CreateReviewDTO} body 
         * @param {number} username 
         * @param {number} bookingId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createReview(body: CreateReviewDTO, username: number, bookingId: number, options?: any) {
            return ReviewControllerApiFp(configuration).createReview(body, username, bookingId, options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllReviews(options?: any) {
            return ReviewControllerApiFp(configuration).getAllReviews(options)(fetch, basePath);
        },
        /**
         * 
         * @param {number} reviewId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getReview(reviewId: number, options?: any) {
            return ReviewControllerApiFp(configuration).getReview(reviewId, options)(fetch, basePath);
        },
    };
};

/**
 * ReviewControllerApi - object-oriented interface
 * @export
 * @class ReviewControllerApi
 * @extends {BaseAPI}
 */
export class ReviewControllerApi extends BaseAPI {
    /**
     * 
     * @param {CreateReviewDTO} body 
     * @param {number} username 
     * @param {number} bookingId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewControllerApi
     */
    public createReview(body: CreateReviewDTO, username: number, bookingId: number, options?: any) {
        return ReviewControllerApiFp(this.configuration).createReview(body, username, bookingId, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewControllerApi
     */
    public getAllReviews(options?: any) {
        return ReviewControllerApiFp(this.configuration).getAllReviews(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {number} reviewId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReviewControllerApi
     */
    public getReview(reviewId: number, options?: any) {
        return ReviewControllerApiFp(this.configuration).getReview(reviewId, options)(this.fetch, this.basePath);
    }

}
